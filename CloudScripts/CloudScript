handlers.myTest = function (args) {

    // "currentPlayerId" is initialized to the PlayFab ID of the player logged-in on the game client. 
    // Cloud Script handles authenticating the player automatically.
    var message = "Hello " + currentPlayerId + "!";

    // You can use the "log" object to write out debugging statements. The "log" object has
    // three functions corresponding to logging level: debug, info, and error.
    log.info(message);

    // Whatever value you return from a CloudScript handler function is passed back 
    // to the game client. It is set in the "Results" property of the object returned by the 
    // RunCloudScript API. Any log statments generated by the handler function are also included 
    // in the "ActionLog" field of the RunCloudScript result, so you can use them to assist in
    // debugging and error handling.
    //return { messageValue: message };

    var result = server.GetUserReadOnlyData({ PlayFabId: currentPlayerId });
    return result;
}

function isTesting() {
    var internalData = server.GetUserInternalData({ PlayFabId: currentPlayerId, Keys: ["Testing"] });    
    var data = internalData["Data"];
    var value = data["Testing"];
    var isTesting = value["Value"] == "true";
    
    return isTesting;
}

handlers.getProgressData = function (args) {
    if (!isTesting) {
        return;    
    }

    var className = args.data["Class"];
    var targetID = args.data["TargetID"];

    var readOnlyData = GetReadOnlyProgressData(className);
    var progressData = GetProgressForTarget(readOnlyData, targetID);
        
    var dataToString = JSON.stringify(progressData);
    var data = { data : dataToString };

    return data;    
}

handlers.setPlayerData = function(args) {
    if (!isTesting) {
        return;
    }

    var key = args.data["Key"];
    var value = args.data["Value"];

    var dataToSave = {};
    dataToSave[key] = value;

    server.UpdateUserReadOnlyData({ PlayFabId: currentPlayerId, Data: dataToSave, Permission: "Public"});
}

handlers.setPlayerCurrency = function(args) {
    if (!isTesting) {
        return;
    }

    var amountToSet = args.data["Amount"];
    var currencyType = args.data["Type"];

    var playerInventory = GetPlayerInventory();    
    var currentAmount = GetAmountOfCurrency(playerInventory, currencyType);
    var changeInCurrency = currentAmount - amountToSet;    

    if (changeInCurrency > 0) {
        server.SubtractUserVirtualCurrency({ PlayFabId: currentPlayerId, VirtualCurrency: currencyType, Amount: changeInCurrency });
    } else if (changeInCurrency < 0) {
        server.AddUserVirtualCurrency({ PlayFabId: currentPlayerId, VirtualCurrency: currencyType, Amount: Math.abs(changeInCurrency) });
    }
}

handlers.canTrainUnit = function (args) {
    var saveData = server.GetUserReadOnlyData({ PlayFabId: currentPlayerId, Keys: ["BASE_MELEE_1"] });

    server.UpdateUserReadOnlyData({
        PlayFabId: currentPlayerId,
        Data: {
            BASE_MELEE_1: 10
        }
    });
}

handlers.getAllDataForClass = function (args) {
    var className = args.data["Class"];

    var data = GetTitleDataForClass(className);

    return data;
}

/////////////////////////////////////////////////
/// Upgradeables
/// Things that can have their level upgraded.
/////////////////////////////////////////////////

handlers.initiateUpgrade = function (args) {
    var className = args.data["Class"];
    var targetID = args.data["TargetID"];
    var upgradeID = args.data["UpgradeID"];

    var upgradeData = GetUpgradeDataForTarget(className, targetID, upgradeID);
    var readOnlyData = GetReadOnlyProgressData(className);
    var progressData = GetProgressForTarget(readOnlyData, targetID);

    var playerInventory = GetPlayerInventory();

    if ( CanUpgrade(upgradeData, progressData, playerInventory) ) {
        PayForUpgrade(upgradeData, progressData, playerInventory);

        Upgrade(readOnlyData, className, progressData, targetID);
    } else {
        return { outOfSync : true };
    }
}

function GetPlayerInventory() {
    return server.GetUserInventory({ PlayFabId: currentPlayerId });
}

function GetReadOnlyProgressData(className) {
    var progressKey = GetProgressKey(className);
    var rawData = server.GetUserReadOnlyData({ PlayFabId: currentPlayerId, Keys: [progressKey] });
    var actualData = rawData["Data"];
    var data = actualData[progressKey];
    var valueData = JSON.parse(data["Value"]);

    return valueData;    
}

function GetProgressKey(className) {
    return className + "Progress";
}

function GetProgressForTarget(readOnlyData, targetID) {    
    var progressData = readOnlyData[targetID];
    
    return progressData;
}

function GetUpgradeDataForTarget(className, targetID, upgradeID) {
    var dataForTarget = GetDataForTarget(className, targetID);
    var upgradeData = JSON.parse(dataForTarget[upgradeID]);

    return upgradeData;
}

function GetDataForTarget(className, targetID) {
    var allDataForClass = GetTitleDataForClass(className);
    var dataForTarget = allDataForClass[targetID];

    return dataForTarget;
}

function GetTitleDataForClass(className) {
    var moduleNames = GetAllModules();
    for (var i = 0; i < moduleNames.length; i++) {
        moduleNames[i] += className;
    }

    var titleData = server.GetTitleData({ Keys : moduleNames });
    var dataPerModule = titleData["Data"];
    var classData = {};

    for (var moduleKey in dataPerModule) {
        var classesInModule = JSON.parse(dataPerModule[moduleKey]);

        for(var data in classesInModule) {
            classData[data] = classesInModule[data];
        }
    }

    return classData;
}

function GetAllModules() {
    var modules = ["Base"];

    return modules;
}

function GetLevelsForClass(className) {
    var upgradeableData;

    if (className == "Building") {
        upgradeableData = server.GetUserReadOnlyData({ PlayFabId: currentPlayerId, Keys: ["BuildingLevels"] });
    }

    return upgradeableData;
}

function CanUpgrade(upgradeData, progressData, playerInventory) {
    if (IsAtMaxLevel(upgradeData, progressData) || !CanAffordUpgrade(upgradeData, progressData, playerInventory)) {
        return false;
    }

    return true;
}

function IsAtMaxLevel(upgradeData, progressData) {
    return progressData["Level"] >= upgradeData["MaxLevel"];
}

function CanAffordUpgrade(upgradeData, progressData, playerInventory) {
    var playerCurrencies = GetPlayerCurrenciesFromInventory(playerInventory);
    var resourcesToUpgrade = upgradeData["ResourcesToUpgrade"];
    var level = progressData["Level"];

    for (var resource in resourcesToUpgrade) {
        var costPerLevel = resourcesToUpgrade[resource];
        var cost = costPerLevel * level;
        
        if(!HasEnoughCurrency(playerCurrencies, resource, cost)) {
            return false;
        }
    }

    return true;
}

function HasEnoughCurrency(playerCurrencies, currencyType, amount) {
    var currentCurrency = playerCurrencies[currencyType];    
    return currentCurrency >= amount;
}

function GetAmountOfCurrency(playerInventory, currencyType) {
    var playerCurrencies = playerInventory["VirtualCurrency"];
    return playerCurrencies[currencyType];
}

function GetPlayerCurrenciesFromInventory(playerInventory) {    
    var playerCurrencies = playerInventory["VirtualCurrency"];

    return playerCurrencies;
}

function PayForUpgrade(upgradeData, progressData, playerInventory) {
    var resourcesToUpgrade = upgradeData["ResourcesToUpgrade"];
    var level = progressData["Level"];

    for (var resource in resourcesToUpgrade) {
        var costPerLevel = resourcesToUpgrade[resource];
        var cost = costPerLevel * level;
                
        server.SubtractUserVirtualCurrency({ PlayFabId: currentPlayerId, VirtualCurrency: resource, Amount: cost });
    }
}

function Upgrade(readOnlyData, className, progressData, targetID) {
    progressData["Level"] += 1;
    readOnlyData[targetID] = progressData;

    var dataAsString = JSON.stringify(readOnlyData);

    var progressKey = GetProgressKey(className);
    log.info(progressKey);
    log.info(dataAsString);

    var data = {};
    data[progressKey] = dataAsString;
    log.info(data);

    server.UpdateUserReadOnlyData({ PlayFabId: currentPlayerId, Data: data, Permission: "Public"});
}

handlers.getUpgradeCost = function (args) {
    
}

/////////////////////////////////////////////////
/// ~Upgradeables
/////////////////////////////////////////////////